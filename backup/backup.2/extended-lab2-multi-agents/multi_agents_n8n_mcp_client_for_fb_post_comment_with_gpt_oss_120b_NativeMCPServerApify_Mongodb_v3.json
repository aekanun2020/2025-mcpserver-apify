{
  "name": "multi-agents-n8n_mcp_client_for_fb_post_comment_with_gpt_oss_120b_NativeMCPServerApify-Mongodb-v3",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -600,
        360
      ],
      "id": "85f2a4a7-1467-417b-a2f8-45efff4ed8e4",
      "name": "When chat message received",
      "webhookId": "2c5fbad8-0706-48a9-b71e-e17584ccf286"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# บทบาทและความเชี่ยวชาญ (Your Role & Expertise)\nคุณเป็น AI Facebook Data Assistant ระดับผู้เชี่ยวชาญที่มีความสามารถในการรวบรวม วิเคราะห์ และนำเสนอข้อมูลจาก Facebook อย่างมีระบบและน่าเชื่อถือ\n\n# กระบวนการทำงาน ReAct (ReAct Working Process)\nใช้วิธีการ ReAct (Reasoning + Acting) ในทุกคำถาม:\n\n## ขั้นตอนที่ 1: THOUGHT\n- วิเคราะห์คำถามและวัตถุประสงค์ทางธุรกิจ\n- ระบุข้อมูลที่จำเป็นต้องดึงมาอย่างเฉพาะเจาะจง\n- วางแผนลำดับการดึงข้อมูลที่เหมาะสม\n- ประเมินความเป็นไปได้และข้อจำกัด\n\n## ขั้นตอนที่ 2: ACTION\n- List tools ที่พร้อมใช้งานเพื่อตรวจสอบ schema และ parameters\n- เลือกและใช้เครื่องมือที่เหมาะสมตาม schema ที่ได้รับ\n- ใส่ parameters ที่ถูกต้องและครบถ้วนตาม format ที่กำหนด\n\n## ขั้นตอนที่ 3: OBSERVATION\n- วิเคราะห์ผลลัพธ์ที่ได้รับอย่างละเอียด\n- ตรวจสอบความถูกต้อง ความครบถ้วน และความน่าเชื่อถือ\n- ระบุข้อมูลที่ยังขาดหายไปหรือต้องการเพิ่มเติม\n- หากข้อมูลไม่ครบ กลับไป THOUGHT เพื่อวางแผนเพิ่มเติม\n\n## ขั้นตอนที่ 4: ANSWER\n- นำเสนอคำตอบที่สมบูรณ์และมีโครงสร้างชัดเจน\n- อ้างอิงแหล่งที่มาและวันที่ของข้อมูลทุกชิ้น\n- ให้ insights และข้อเสนะแนะทางธุรกิจ\n- ระบุข้อจำกัดหรือคำเตือนหากจำเป็น\n\n# ความรับผิดชอบหลัก (Core Responsibilities)\n1. **การแปลความต้องการ**: แปลคำถามทางธุรกิจให้เป็น parameters ที่เหมาะสม\n2. **การเลือกแหล่งข้อมูล**: เลือก Facebook pages/posts ที่เกี่ยวข้องและน่าเชื่อถือ\n3. **การกำหนดขอบเขต**: กำหนดจำนวนและตัวกรองที่เหมาะสมตามวัตถุประสงค์\n4. **การวิเคราะห์ข้อมูล**: วิเคราะห์และสังเคราะห์ข้อมูลอย่างลึกซึ้ง\n5. **การนำเสนอผลลัพธ์**: นำเสนอใน format ที่เข้าใจง่ายและใช้งานได้\n\n# การใช้งาน Facebook Tools อย่างถูกต้อง\n## สำหรับ apify-slash-facebook-posts-scraper:\n{\n \"startUrls\": [{\"url\": \"https://www.facebook.com/pagename\"}],\n \"resultsLimit\": 20,\n \"captionText\": false\n // ให้ AI กำหนดช่วงเวลาเองตามความเหมาะสม\n}\n\n## สำหรับ apify-slash-facebook-comments-scraper:\n{\n \"startUrls\": [{\"url\": \"https://www.facebook.com/pagename/posts/12345\"}],\n \"resultsLimit\": 50,\n \"includeNestedComments\": false,\n \"viewOption\": \"RANKED_UNFILTERED\"\n}\n\n# หลักการสำคัญในการใช้ Tools:\n1. **startUrls ต้องเป็น array ของ objects** เสมอ โดยแต่ละ object มี key \"url\"\n2. **resultsLimit เป็น integer** ไม่ใช่ string\n3. **captionText และ includeNestedComments เป็น boolean** (true/false)\n4. **วันที่ใช้ format YYYY-MM-DD** หรือ relative format เช่น \"7 days\"\n\n# การจัดการข้อมูล Comments และ URLs (สำคัญมาก)\n1. **ย่อ URLs ยาวๆ**: หาก comment มี video link หรือ URL ที่มี query parameters ยาว ให้ย่อเป็น \"facebook.com/video/[ID]\" หรือ \"[ชื่อเว็บ]/...\"\n2. **จำกัดความยาว comment**: แสดงเฉพาะส่วนสำคัญของ comment ไม่เกิน 100 ตัวอักษร\n3. **ตัดส่วนที่ไม่จำเป็น**: ไม่ต้องแสดง query parameters หรือ tracking codes ใน URL\n4. **สรุปสั้นๆ**: หาก comment ยาวหรือมี URL เยอะ ให้สรุปเป็น \"คอมเมนต์เกี่ยวกับ [หัวข้อ]\" แทน\n5. **หลีกเลี่ยง output ว่าง**: หากพบข้อมูลที่ซับซ้อน ให้สรุปสั้นๆ แทนที่จะไม่ตอบ\n\n# การจัดการข้อผิดพลาด (Error Handling)\nหากเครื่องมือส่งคืนข้อผิดพลาด:\n1. อธิบายปัญหาและสาเหตุที่เป็นไปได้\n2. เสนอทางเลือกหรือวิธีแก้ไขหากมี\n3. ระบุข้อจำกัดของข้อมูลที่ได้รับชัดเจน\n4. ไม่สร้างข้อมูลสมมติหรือคาดเดา\n\n# คำถามจากผู้ใช้\n{{$json[\"original_question\"]}}\n\n**หมายเหตุสำคัญ**: ต้องปฏิบัติตามกระบวนการ ReAct อย่างเคร่งครัด ห้ามข้ามขั้นตอนหรือให้คำตอบก่อนมีข้อมูลครบถ้วน ต้อง list tools ก่อนใช้งานทุกครั้ง และต้องใช้ parameters format ให้ถูกต้องตาม schema **ห้าม output เป็นค่าว่างเมื่อพบ URL ยาวหรือข้อมูลซับซ้อน ให้สรุปสั้นๆ แทน**",
        "options": {
          "systemMessage": "=You are a Facebook Data Assistant. After using tools and getting results, always provide a complete response based on the tool outputs. Never return empty output as following:\n[\n  {\n    \"output\": \"\"\n  }\n]",
          "maxIterations": 30
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -380,
        360
      ],
      "id": "e55c282f-c23b-4c46-9e33-9dda9827dc80",
      "name": "AI Agent",
      "alwaysOutputData": false,
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-oss-120b",
          "mode": "list",
          "cachedResultName": "openai/gpt-oss-120b"
        },
        "options": {
          "maxTokens": 8000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -460,
        580
      ],
      "id": "e7af7141-3f78-48b5-800f-14f06929a893",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "DzoG8GHEP1wyS0h4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -280,
        580
      ],
      "id": "8032d42c-0d48-41fb-9197-8adcfa5fb28d",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "ใช้ดึงข้อมูลโพสต์จากเพจสาธารณะ รวมถึงลิงก์โพสต์, ข้อความ, ลิงก์เพจ, เวลา, จำนวนไลค์, แชร์, คอมเมนต์, และอื่น ๆ",
        "operation": "executeTool",
        "toolName": "apify-slash-facebook-posts-scraper",
        "toolParameters": "={{ (function() {\n  const paramsString = $fromAI('Tool_Parameters');\n  \n  // ถ้าไม่มีข้อมูลจาก Agent ใส่ default\n  const defaultParams = {\n    startUrls: [{\"url\": \"https://www.facebook.com/imcinstitute\"}],\n    resultsLimit: 5,\n    captionText: false\n  };\n  \n  if (!paramsString) {\n    return defaultParams;\n  }\n  \n  try {\n    const params = JSON.parse(paramsString);\n    return {\n      startUrls: params.startUrls || params.start_urls || defaultParams.startUrls,\n      resultsLimit: params.resultsLimit || params.results_limit || 5,\n      captionText: params.captionText || params.caption_text || false\n    };\n  } catch (e) {\n    return defaultParams;\n  }\n})() }}"
      },
      "type": "n8n-nodes-mcp.mcpClientTool",
      "typeVersion": 1,
      "position": [
        -120,
        580
      ],
      "id": "ef53499a-220f-4733-a64e-3e24f807ab61",
      "name": "MCP Client",
      "credentials": {
        "mcpClientApi": {
          "id": "N1eTg6c00Tia22UJ",
          "name": "MCP Client (STDIO) for native mcp server apify"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "ใช้ดึงข้อมูลคอมเมนต์จากโพสต์ใน Facebook รวมถึงข้อความ, เวลา, จำนวนไลค์, และข้อมูลผู้แสดงความคิดเห็น",
        "operation": "executeTool",
        "toolName": "apify-slash-facebook-comments-scraper",
        "toolParameters": "={{ (function() {\n   const paramsString = $fromAI('Tool_Parameters');\n   const params = JSON.parse(paramsString);\n   \n   return {\n     startUrls: params.startUrls || (Array.isArray(params.start_urls) \n       ? params.start_urls.map(url => ({ url: url }))\n       : [{ url: params.start_urls }]),\n     resultsLimit: params.resultsLimit || params.results_limit || 50,\n     includeNestedComments: params.includeNestedComments || params.include_nested_comments || false,\n     viewOption: params.viewOption || params.view_option || \"RANKED_UNFILTERED\"\n   };\n})() }}"
      },
      "type": "n8n-nodes-mcp.mcpClientTool",
      "typeVersion": 1,
      "position": [
        40,
        580
      ],
      "id": "0bee0330-67da-44c6-8ba0-35f2ddce2309",
      "name": "MCP Client1",
      "credentials": {
        "mcpClientApi": {
          "id": "N1eTg6c00Tia22UJ",
          "name": "MCP Client (STDIO) for native mcp server apify"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=คุณเป็น data engineer ที่จะรับผลลัพธ์จาก AI agent ก่อนหน้ามาประมวลผล\nInput ที่ได้รับ: {{ $('AI Agent').first().json.output }}\n\nงานของคุณ: แปลงข้อมูลนี้เป็น JSON object ที่เหมาะสมสำหรับ MongoDB\n\nกรุณา return เฉพาะ JSON object โดยตรง ไม่ต้องมี markdown code blocks หรือคำอธิบาย\n\nJSON structure ที่ต้องการ:\n1. มีโครงสร้างที่ชัดเจน\n2. เหมาะสำการเก็บใน MongoDB\n3. รองรับการ query ได้อย่างมีประสิทธิภาพ",
        "options": {
          "systemMessage": "=คุณเป็น data engineer ทำหน้าที่สร้าง valid JSON object เพื่อใช้นำเข้า MongoDB\n\nกฎสำคัญ:\n- return เฉพาะ valid JSON object เท่านั้น\n- ห้ามใส่คำอธิบาย markdown หรือข้อความใดๆ\n- ตรวจสอบ JSON syntax ให้ถูกต้อง (comma, quotes, brackets)\n- ห้าม wrap ด้วย ```json``` หรือ array\n\nตัวอย่าง output ที่ถูกต้อง:\n{\"_id\": \"analysis_001\", \"data\": {...}}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -20,
        360
      ],
      "id": "d2403790-ae54-4406-b8fe-37d3af0cc113",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "anthropic/claude-sonnet-4",
          "mode": "list",
          "cachedResultName": "anthropic/claude-sonnet-4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        220,
        580
      ],
      "id": "eff024bb-9389-481e-a90a-cbeb9ca974e2",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "DzoG8GHEP1wyS0h4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "analytics",
        "fields": "={{ Object.keys($json).join(',') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        740,
        340
      ],
      "id": "06241695-6f45-4931-bd97-b94a128caa54",
      "name": "MongoDB",
      "credentials": {
        "mongoDb": {
          "id": "3rhWZ9RQR3IZPB8E",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract and parse JSON from AI Agent output\nconst aiOutput = items[0].json.output;\nconst parsedData = JSON.parse(aiOutput);\n\nreturn [{ json: parsedData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        360
      ],
      "id": "3629a95b-1f62-402a-a154-71adab38dcb4",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2966067a-7bb6-4316-8ad9-2b7681c7e0b9",
              "leftValue": "={{$json[\"output\"]}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        0,
        0
      ],
      "id": "bea05fec-c1c8-43c5-8fc2-5aa5db046c43",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "const staticData = $getWorkflowStaticData('global');\n\n// ตรวจสอบว่าเป็นรอบแรกหรือไม่\nif (!staticData.current_session_data) {\n    // รอบแรก: เก็บข้อมูลทั้งหมดจาก input\n    staticData.current_session_data = {\n        original_question: $json[\"chatInput\"],\n        sessionId: $json[\"userId\"] || \"default-session\",\n        startTime: new Date().toISOString()\n    };\n}\n\n// ส่งออกข้อมูลที่คงอยู่ทุกรอบ\nreturn [{\n    sessionId: staticData.current_session_data.sessionId,\n    original_question: staticData.current_session_data.original_question\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -440,
        160
      ],
      "id": "a113c19f-0901-4a76-ad79-a986e0086f06",
      "name": "Code1"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "64abdb0e-50bb-4e30-b713-93fd29a1c73f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1656692f27ae5b1feebf36ac97aab113ce41f87d4b99f459a8f0214128866f40"
  },
  "id": "2JCfTooYng50V3a7",
  "tags": [
    {
      "name": "statble",
      "id": "1c28xYk2c1jV6Y20",
      "createdAt": "2025-08-24T09:30:17.350Z",
      "updatedAt": "2025-08-24T09:30:17.350Z"
    }
  ]
}