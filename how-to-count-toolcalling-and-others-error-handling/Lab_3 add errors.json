{
  "name": "Lab-3",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=คำถามจากผู้ใช้: {{$json[\"original_question\"]}}\n\n\nคำตอบจาก AI Agent แรกซึ่งทำหน้าที่วิเคราะห์และสรุปคำตอบ:  {{ $('Facebook Scraper Agent ').first().json.output }}",
        "options": {
          "systemMessage": "=คุณเป็นนักนำเสนอข้อมูลมืออาชีพที่รับข้อมูลการวิเคราะห์จาก AI agent แรกมานำเสนอให้เข้าใจง่าย\n\nข้อกำหนด:\n- นำเสนอข้อมูลเป็นภาษาไทยที่อ่านง่าย กระชับ ชัดเจน และเกี่ยวข้องกับคำถามโดยตรง\n- จัดหมวดหมู่ข้อมูลเป็นหัวข้อที่เข้าใจได้ทันที\n- เน้นประเด็นสำคัญและข้อสรุปที่ actionable\n- ใช้ bullet points, หัวข้อย่อย หรือตารางตามความเหมาะสม\n- ใช้ emoji การเน้นข้อความ การจัดรูปแบบอักษร เพื่อดึงดูดความสนใจ\n\nการจัดการข้อมูล:\n- ใช้เฉพาะข้อมูลที่ได้รับจาก agent แรก\n- ห้ามเพิ่มเติมข้อมูลหรือตีความเกินจากที่มี\n- ห้ามสร้างข้อมูลหรือข้อสรุปที่ไม่มีในต้นฉบับ\n- หากข้อมูลไม่ครบถ้วน ให้ระบุชัดเจนว่าขาดข้อมูลอะไร\n\nรูปแบบการนำเสนอ:\n- เริ่มด้วยสรุปผลลัพธ์หลักใน 1-2 ประโยค\n- จัดลำดับข้อมูลตามความสำคัญ\n- ใช้ภาษาที่ผู้บริหารเข้าใจได้ง่าย\n- ปิดท้ายด้วย next actions ที่ชัดเจน\n\n# รูปแบบ Output ที่ต้องการ (Output Format)\n\n**สำคัญมาก**: คำตอบของคุณต้องมี 2 ส่วน\n\n## ส่วนที่ 1: สรุปสั้นๆ สำหรับผู้ใช้\n- เขียนเป็นประโยคสั้นๆ อธิบายผลลัพธ์\n\n## ส่วนที่ 2: Structured JSON Data (บังคับ)\nต้องมี JSON block นี้เสมอ ห้ามใส่ markdown table, emoji, หรือ formatting อื่นใน JSON:\n```json\n{\n  \"pages\": [\n    {\n      \"page_name\": \"ชื่อเพจ\",\n      \"posts\": [\n        {\n          \"post_time\": \"ISO datetime\",\n          \"text\": \"ข้อความโพสต์\",\n          \"likes\": 0,\n          \"comments_count\": 0,\n          \"shares\": 0,\n          \"media_type\": \"video/photo/text\"\n        }\n      ],\n      \"posts_count\": 1,\n      \"total_likes\": 0,\n      \"total_comments\": 0,\n      \"total_shares\": 0,\n      \"total_engagement\": 0,\n      \"average_engagement\": 0\n    }\n  ],\n  \"insights\": [\n    \"ข้อสังเกตที่ 1\",\n    \"ข้อสังเกตที่ 2\"\n  ],\n  \"recommendations\": [\n    \"คำแนะนำที่ 1\",\n    \"คำแนะนำที่ 2\"\n  ]\n}\n```"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -580,
        0
      ],
      "id": "ccde17f7-e11d-4f24-b69d-af616f381e76",
      "name": "Data Engineer Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "ใช้ดึงข้อมูลโพสต์จากเพจสาธารณะ รวมถึงลิงก์โพสต์, ข้อความ, ลิงก์เพจ, เวลา, จำนวนไลค์, แชร์, คอมเมนต์, และอื่น ๆ",
        "operation": "executeTool",
        "toolName": "apify-slash-facebook-posts-scraper",
        "toolParameters": "={{ (function() {\n  const paramsString = $fromAI('Tool_Parameters');\n  \n  // ถ้าไม่มีข้อมูลจาก Agent ใส่ default\n  const defaultParams = {\n    startUrls: [{\"url\": \"https://www.facebook.com/imcinstitute\"}],\n    resultsLimit: 5,\n    captionText: false\n  };\n  \n  if (!paramsString) {\n    return defaultParams;\n  }\n  \n  try {\n    const params = JSON.parse(paramsString);\n    return {\n      startUrls: params.startUrls || params.start_urls || defaultParams.startUrls,\n      resultsLimit: params.resultsLimit || params.results_limit || 5,\n      captionText: params.captionText || params.caption_text || false\n    };\n  } catch (e) {\n    return defaultParams;\n  }\n})() }}"
      },
      "type": "n8n-nodes-mcp.mcpClientTool",
      "typeVersion": 1,
      "position": [
        -1160,
        240
      ],
      "id": "17a09b24-5798-4b62-8c0b-33aed507b593",
      "name": "MCP Client for scraping posts",
      "credentials": {
        "mcpClientApi": {
          "id": "HOIjpLqFnewDSz0t",
          "name": "MCP Client (STDIO) account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# บทบาทและความเชี่ยวชาญ (Your Role & Expertise)\nคุณเป็น AI Facebook Data Assistant ระดับผู้เชี่ยวชาญที่มีความสามารถในการรวบรวม วิเคราะห์ และนำเสนอข้อมูลจาก Facebook อย่างมีระบบและน่าเชื่อถือ\n\n# กระบวนการทำงาน ReAct (ReAct Working Process)\nใช้วิธีการ ReAct (Reasoning + Acting) ในทุกคำถาม:\n\n## ขั้นตอนที่ 1: THOUGHT\n- วิเคราะห์คำถามและวัตถุประสงค์ทางธุรกิจ\n- ระบุข้อมูลที่จำเป็นต้องดึงมาอย่างเฉพาะเจาะจง\n- วางแผนลำดับการดึงข้อมูลที่เหมาะสม\n- ประเมินความเป็นไปได้และข้อจำกัด\n\n## ขั้นตอนที่ 2: ACTION\n- List tools ที่พร้อมใช้งานเพื่อตรวจสอบ schema และ parameters\n- เลือกและใช้เครื่องมือที่เหมาะสมตาม schema ที่ได้รับ\n- ใส่ parameters ที่ถูกต้องและครบถ้วนตาม format ที่กำหนด\n\n## ขั้นตอนที่ 3: OBSERVATION\n- วิเคราะห์ผลลัพธ์ที่ได้รับอย่างละเอียด\n- ตรวจสอบความถูกต้อง ความครบถ้วน และความน่าเชื่อถือ\n- ระบุข้อมูลที่ยังขาดหายไปหรือต้องการเพิ่มเติม\n- หากข้อมูลไม่ครบ กลับไป THOUGHT เพื่อวางแผนเพิ่มเติม\n\n## ขั้นตอนที่ 4: ANSWER\n- นำเสนอคำตอบที่สมบูรณ์และมีโครงสร้างชัดเจน\n- อ้างอิงแหล่งที่มาและวันที่ของข้อมูลทุกชิ้น\n- ให้ insights และข้อเสนะแนะทางธุรกิจ\n- ระบุข้อจำกัดหรือคำเตือนหากจำเป็น\n\n# ความรับผิดชอบหลัก (Core Responsibilities)\n1. **การแปลความต้องการ**: แปลคำถามทางธุรกิจให้เป็น parameters ที่เหมาะสม\n2. **การเลือกแหล่งข้อมูล**: เลือก Facebook pages/posts ที่เกี่ยวข้องและน่าเชื่อถือ\n3. **การกำหนดขอบเขต**: กำหนดจำนวนและตัวกรองที่เหมาะสมตามวัตถุประสงค์\n4. **การวิเคราะห์ข้อมูล**: วิเคราะห์และสังเคราะห์ข้อมูลอย่างลึกซึ้ง\n5. **การนำเสนอผลลัพธ์**: นำเสนอใน format ที่เข้าใจง่ายและใช้งานได้\n\n# การใช้งาน Facebook Tools อย่างถูกต้อง\n## สำหรับ apify-slash-facebook-posts-scraper:\n{\n \"startUrls\": [{\"url\": \"https://www.facebook.com/pagename\"}],\n \"resultsLimit\": 20,\n \"captionText\": false\n // ให้ AI กำหนดช่วงเวลาเองตามความเหมาะสม\n}\n\n## สำหรับ apify-slash-facebook-comments-scraper:\n{\n \"startUrls\": [{\"url\": \"https://www.facebook.com/pagename/posts/12345\"}],\n \"resultsLimit\": 50,\n \"includeNestedComments\": false,\n \"viewOption\": \"RANKED_UNFILTERED\"\n}\n\n# หลักการสำคัญในการใช้ Tools:\n1. **startUrls ต้องเป็น array ของ objects** เสมอ โดยแต่ละ object มี key \"url\"\n2. **resultsLimit เป็น integer** ไม่ใช่ string\n3. **captionText และ includeNestedComments เป็น boolean** (true/false)\n4. **วันที่ใช้ format YYYY-MM-DD** หรือ relative format เช่น \"7 days\"\n\n# การจัดการข้อมูล Comments และ URLs (สำคัญมาก)\n1. **ย่อ URLs ยาวๆ**: หาก comment มี video link หรือ URL ที่มี query parameters ยาว ให้ย่อเป็น \"facebook.com/video/[ID]\" หรือ \"[ชื่อเว็บ]/...\"\n2. **จำกัดความยาว comment**: แสดงเฉพาะส่วนสำคัญของ comment ไม่เกิน 100 ตัวอักษร\n3. **ตัดส่วนที่ไม่จำเป็น**: ไม่ต้องแสดง query parameters หรือ tracking codes ใน URL\n4. **สรุปสั้นๆ**: หาก comment ยาวหรือมี URL เยอะ ให้สรุปเป็น \"คอมเมนต์เกี่ยวกับ [หัวข้อ]\" แทน\n5. **หลีกเลี่ยง output ว่าง**: หากพบข้อมูลที่ซับซ้อน ให้สรุปสั้นๆ แทนที่จะไม่ตอบ\n\n# การจัดการข้อผิดพลาด (Error Handling)\nหากเครื่องมือส่งคืนข้อผิดพลาด:\n1. อธิบายปัญหาและสาเหตุที่เป็นไปได้\n2. เสนอทางเลือกหรือวิธีแก้ไขหากมี\n3. ระบุข้อจำกัดของข้อมูลที่ได้รับชัดเจน\n4. ไม่สร้างข้อมูลสมมติหรือคาดเดา\n\n# คำถามจากผู้ใช้\n{{$json[\"original_question\"]}}\n\n**หมายเหตุสำคัญ**: ต้องปฏิบัติตามกระบวนการ ReAct อย่างเคร่งครัด ห้ามข้ามขั้นตอนหรือให้คำตอบก่อนมีข้อมูลครบถ้วน ต้อง list tools ก่อนใช้งานทุกครั้ง และต้องใช้ parameters format ให้ถูกต้องตาม schema **ห้าม output เป็นค่าว่างเมื่อพบ URL ยาวหรือข้อมูลซับซ้อน ให้สรุปสั้นๆ แทน**",
        "options": {
          "systemMessage": "=You are a Facebook Data Assistant. After using tools and getting results, always provide a complete response based on the tool outputs. Never return empty output as following:\n[\n  {\n    \"output\": \"\"\n  }\n]",
          "maxIterations": 30
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -1300,
        0
      ],
      "id": "9b28db17-61a7-484f-811b-ef6a0421f67a",
      "name": "Facebook Scraper Agent ",
      "alwaysOutputData": false,
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const staticData = $getWorkflowStaticData('global');\n\n// ตรวจสอบว่าเป็นรอบแรกหรือไม่\nif (!staticData.current_session_data) {\n    // รอบแรก: เก็บข้อมูลทั้งหมดจาก input\n    staticData.current_session_data = {\n        original_question: $json[\"chatInput\"],\n        sessionId: $json[\"userId\"] || \"default-session\",\n        startTime: new Date().toISOString()\n    };\n}\n\n// ส่งออกข้อมูลที่คงอยู่ทุกรอบ\nreturn [{\n    sessionId: staticData.current_session_data.sessionId,\n    original_question: staticData.current_session_data.original_question\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1540,
        0
      ],
      "id": "8836083b-2c08-4802-96c2-fa1c04091889",
      "name": "Question memorizer"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-oss-20b",
          "mode": "list",
          "cachedResultName": "openai/gpt-oss-20b"
        },
        "options": {
          "maxTokens": 8000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1300,
        240
      ],
      "id": "cbf553c2-9071-490b-b030-657d45de2b5f",
      "name": "OpenAI Chat Model by OpenRouter",
      "credentials": {
        "openAiApi": {
          "id": "B4HRBh8XM0TjmEb8",
          "name": "(onClass) OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "ใช้ดึงข้อมูลคอมเมนต์จากโพสต์ใน Facebook รวมถึงข้อความ, เวลา, จำนวนไลค์, และข้อมูลผู้แสดงความคิดเห็น",
        "operation": "executeTool",
        "toolName": "apify-slash-facebook-comments-scraper",
        "toolParameters": "={{ (function() {\n   const paramsString = $fromAI('Tool_Parameters');\n   const params = JSON.parse(paramsString);\n   \n   return {\n     startUrls: params.startUrls || (Array.isArray(params.start_urls) \n       ? params.start_urls.map(url => ({ url: url }))\n       : [{ url: params.start_urls }]),\n     resultsLimit: params.resultsLimit || params.results_limit || 50,\n     includeNestedComments: params.includeNestedComments || params.include_nested_comments || false,\n     viewOption: params.viewOption || params.view_option || \"RANKED_UNFILTERED\"\n   };\n})() }}"
      },
      "type": "n8n-nodes-mcp.mcpClientTool",
      "typeVersion": 1,
      "position": [
        -1020,
        240
      ],
      "id": "11209586-c9b8-4f8f-a8f6-cb76d3cf6b08",
      "name": "MCP Client for scraping comments",
      "credentials": {
        "mcpClientApi": {
          "id": "HOIjpLqFnewDSz0t",
          "name": "MCP Client (STDIO) account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-oss-120b",
          "mode": "list",
          "cachedResultName": "openai/gpt-oss-120b"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -540,
        220
      ],
      "id": "3d275b76-d1b2-465a-b813-a4ad00ca54eb",
      "name": "OpenAI Chat Model by OpenRouter-1",
      "credentials": {
        "openAiApi": {
          "id": "B4HRBh8XM0TjmEb8",
          "name": "(onClass) OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// รับ input จาก node ก่อนหน้า\nconst input = items[0].json;\n\n// ดึงสตริงจากฟิลด์ output\nlet raw = input.output;\n\n// เผื่อกรณี output ไม่ใช่สตริง (แต่โดยรูปนี้เป็นสตริง)\nif (typeof raw !== 'string') {\n  raw = JSON.stringify(raw);\n}\n\n// ตัดส่วนเกริ่นนำออก แล้วเก็บเฉพาะ JSON object ระหว่าง { ... }\nconst start = raw.indexOf('{');\nconst end = raw.lastIndexOf('}');\nif (start === -1 || end === -1) {\n  throw new Error('ไม่พบ JSON object ในข้อความ output');\n}\nconst jsonString = raw.slice(start, end + 1);\n\n// แปลงเป็นออบเจกต์\nconst data = JSON.parse(jsonString);\n\n// ป้องกันกรณีไม่มี pages หรือ posts\nconst pages = Array.isArray(data.pages) ? data.pages : [];\nconst flattened = [];\n\n// ไส้ flatten\nfor (const page of pages) {\n  const posts = Array.isArray(page.posts) ? page.posts : [];\n  for (const post of posts) {\n    \n    flattened.push({\n      page_name: page.page_name ?? null,\n      post_time: post.post_time ?? null,\n      text: post.text ?? \"\",\n      likes: post.likes ?? 0,\n      comments_count: post.comments_count ?? 0,\n      shares: post.shares ?? 0,\n      media_type: post.media_type ?? null,\n      total_likes: page.total_likes ?? 0,\n      total_comments: page.total_comments ?? 0,\n      total_shares: page.total_shares ?? 0,\n      total_engagement: page.total_engagement ?? 0,\n      average_engagement: page.average_engagement ?? 0,\n      // ถ้าอยากพก insights / recommendations มาทุกแถวด้วย ใส่ 2 บรรทัดนี้:\n      insights: Array.isArray(data.insights) ? data.insights : [],\n      recommendations: Array.isArray(data.recommendations) ? data.recommendations : [],\n    });\n  }\n}\n\n// ส่งออกเป็น n8n items\nreturn flattened.map(row => ({ json: row }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        140,
        0
      ],
      "id": "04565cb9-5625-4988-84a3-9e1318bc9c0c",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "social",
        "fields": "=page_name,post_time,text,likes,comments_count,shares,media_type",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        360,
        0
      ],
      "id": "14652132-eb60-41d6-ac01-bd1f28dddb95",
      "name": "MongoDB",
      "credentials": {
        "mongoDb": {
          "id": "waTS5QwGGwAms6UX",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "id": "f62e85c3-d9e7-48fe-8b4c-bad9fc4ff74f",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -2220,
        0
      ],
      "description": "This node triggers your content generation workflow on a schedule. Default is every 5 days at 9 AM, but you can adjust this to daily, weekly, or any custom schedule that fits your content strategy. The workflow will start automatically at the specified time.",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "jsCode": "// Code node สำหรับสุ่มเลือกคำถาม\nconst questions = $input.first().json.questions;\n\n// สุ่มเลือกคำถาม หรือใช้แบบเรียงตามลำดับ\nconst currentHour = new Date().getHours();\nconst questionIndex = currentHour % questions.length; // หมุนเวียนตามชั่วโมง\nconst selectedQuestion = questions[questionIndex];\n\n// สร้าง session ID แบบ unique\nconst sessionId = `facebook-analysis-${new Date().toISOString().split('T')[0]}-${questionIndex}`;\n\n// ส่งข้อมูลไปยัง Agent\nreturn [{\n  json: {\n    chatInput: selectedQuestion,\n    sessionId: sessionId, // เพิ่ม sessionId ตรงนี้\n    timestamp: new Date().toISOString(),\n    questionIndex: questionIndex,\n    executionType: \"scheduled\"\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1800,
        0
      ],
      "id": "37c8bbbd-6491-4298-ae12-9c4b87da70a6",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "82884fd0-b96e-4088-bd55-5341e310bf50",
              "name": "questions",
              "value": "={{ [\n  \"ดึงโพส https://www.facebook.com/nationtv และ https://www.facebook.com/thaipbs มาเปรียบเทียบกัน 1 โพสล่าสุด พร้อม comment 5 comment\",\n  \"วิเคราะห์ engagement ของ https://www.facebook.com/natenapa.nate โพส 5 โพสล่าสุด\",\n  \"ตรวจสอบ sentiment ของคอมเมนต์ใน https://www.facebook.com/imcinstitute โพส 3 โพสล่าสุด\",\n  \"เปรียบเทียบ engagement ระหว่าง https://www.facebook.com/natenapa.nate และ https://www.facebook.com/Lost.Somewhere.Together ภายใต้ 5 โพสล่าสุด\"\n] }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2000,
        0
      ],
      "id": "f4ce2b80-03e9-465c-bfe2-43c859f05a5e",
      "name": "SET Questions"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b3d0154d-61eb-4a7a-9178-ef099a4cc979",
              "leftValue": "={{ $json.error }}",
              "rightValue": "not match expected schema",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -940,
        40
      ],
      "id": "84e38fbb-4d34-43d5-9967-ca99aedfc119",
      "name": "not match expected schema ?"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -660,
        -220
      ],
      "id": "2ea9eec9-6a1e-491b-a694-42d857384c10",
      "name": "Wait 5 sec",
      "webhookId": "a6b5f5a4-aedc-4696-be9c-0fc2da07ebad"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b3d0154d-61eb-4a7a-9178-ef099a4cc979",
              "leftValue": "={{ $json.error }}",
              "rightValue": "not match expected schema",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -220,
        260
      ],
      "id": "dd09e85e-1c3b-4bbe-a5c1-a1c7d2d98f69",
      "name": "not match expected schema ?1"
    },
    {
      "parameters": {
        "errorMessage": "={{ $json.error }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -760,
        220
      ],
      "id": "f8e00d6e-bead-4efb-8ffb-ae3e83161b45",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "errorMessage": "={{ $json.error }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        40,
        280
      ],
      "id": "5eea61ef-9b04-40d2-96bb-03d5bc1e625e",
      "name": "Stop and Error1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2966067a-7bb6-4316-8ad9-2b7681c7e0b9",
              "leftValue": "={{$json[\"output\"]}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -880,
        -200
      ],
      "id": "7651a590-2d68-4f60-8267-4041b325f283",
      "name": "output empty ?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2966067a-7bb6-4316-8ad9-2b7681c7e0b9",
              "leftValue": "={{$json[\"output\"]}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -140,
        -20
      ],
      "id": "f91a15a9-d2f9-46d5-a0b8-c15c508aee55",
      "name": "output empty ?1"
    }
  ],
  "pinData": {},
  "connections": {
    "Data Engineer Agent": {
      "main": [
        [
          {
            "node": "output empty ?1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "not match expected schema ?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client for scraping posts": {
      "ai_tool": [
        [
          {
            "node": "Facebook Scraper Agent ",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Facebook Scraper Agent ": {
      "main": [
        [
          {
            "node": "output empty ?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "not match expected schema ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Question memorizer": {
      "main": [
        [
          {
            "node": "Facebook Scraper Agent ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model by OpenRouter": {
      "ai_languageModel": [
        [
          {
            "node": "Facebook Scraper Agent ",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client for scraping comments": {
      "ai_tool": [
        [
          {
            "node": "Facebook Scraper Agent ",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model by OpenRouter-1": {
      "ai_languageModel": [
        [
          {
            "node": "Data Engineer Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "SET Questions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Question memorizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SET Questions": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "not match expected schema ?": {
      "main": [
        [
          {
            "node": "Wait 5 sec",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 5 sec": {
      "main": [
        [
          {
            "node": "Question memorizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "not match expected schema ?1": {
      "main": [
        [
          {
            "node": "Data Engineer Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output empty ?": {
      "main": [
        [
          {
            "node": "Wait 5 sec",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Data Engineer Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output empty ?1": {
      "main": [
        [
          {
            "node": "Data Engineer Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1b11cfff-431c-4314-a30e-6cb87d6219cf",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9d9b16b56dafd99a49e8ac36098d990b69485ec0cf172e50c4b62d23bf223afa"
  },
  "id": "QSa2GsVO59C3pM8h",
  "tags": [
    {
      "createdAt": "2025-10-29T04:27:27.049Z",
      "updatedAt": "2025-10-29T04:27:27.049Z",
      "id": "DlxEE7CsbADxwUQD",
      "name": "tested@28-10-2025"
    },
    {
      "createdAt": "2025-10-29T04:27:26.929Z",
      "updatedAt": "2025-10-29T04:27:26.929Z",
      "id": "OScPgY51mToPJz4x",
      "name": "webinar"
    },
    {
      "createdAt": "2025-10-29T04:27:27.027Z",
      "updatedAt": "2025-10-29T04:27:27.027Z",
      "id": "OlhBuF3IUJ9FJH6v",
      "name": "tested@8Sep2025"
    },
    {
      "createdAt": "2025-10-29T04:27:27.067Z",
      "updatedAt": "2025-10-29T04:27:27.067Z",
      "id": "ecsglPFZibVMcmyr",
      "name": "tested@17Sep2025"
    },
    {
      "createdAt": "2025-10-29T04:27:26.957Z",
      "updatedAt": "2025-10-29T04:27:26.957Z",
      "id": "hXPpMl8vlGNiAPfS",
      "name": "in-progress"
    },
    {
      "createdAt": "2025-10-28T04:25:23.254Z",
      "updatedAt": "2025-10-28T04:25:23.254Z",
      "id": "rtO8ZEoQYP8MP840",
      "name": "stable"
    },
    {
      "createdAt": "2025-10-29T04:27:27.000Z",
      "updatedAt": "2025-10-29T04:27:27.000Z",
      "id": "uokk0S1tDgZSuWYh",
      "name": "tested@10Sep2025"
    }
  ]
}